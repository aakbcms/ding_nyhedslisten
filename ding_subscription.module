<?php

/**
 * @file
 *
 */

include_once 'ding_subscription.features.inc';

/**
 * Implements hook_menu().
 */
function ding_subscription_menu() {
  $items = array();

  $items['admin/config/ding/subscription'] = array(
    'title' => 'Subscription',
    'description' => 'Configure subscriptions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_subscription_admin_settings_form'),
    'access arguments' => array('administer content'),
    'file' => 'includes/ding_subscription.admin.inc',
  );

  $items['admin/config/people/subscription'] = array(
    'title' => 'Lookup subscription',
    'description' => 'User subscription lookup in heyloyalty',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_subscription_lookup_form'),
    'access arguments' => array('administer users'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_subscription_theme($existing, $type, $theme, $path) {
  return array(
    'ding_subscription_user_info' => array(
      'variables' => array(
        'items' => [],
      ),
      'template' => 'templates/ding-subscription-user-info',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function ding_subscription_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_form().
 *
 * The form used to allow the end-user to sign-up on the different lists.
 *
 * @throws \HLErrorException
 *   If communication fails with HL.
 */
function ding_subscription_form($form, &$form_state, $user) {
  $configuration = variable_get('ding_subscription_settings', []);
  $hl = new HeyloyaltyClient($configuration['api']['key'], $configuration['api']['secret']);

  $form['#tree'] = TRUE;

  $form['#attributes'] = array(
    'class' => 'ding-subscription',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'ding_subscription') . '/css/ding_subscription.css',
    'https://cdn.jsdelivr.net/npm/select2@4.0.12/dist/css/select2.min.css' => array(
      'type' => 'external',
    ),
  );
  $form['#attached']['js'] = array(
     drupal_get_path('module', 'ding_subscription') . '/js/ding_subscription.js',
    'https://cdn.jsdelivr.net/npm/select2@4.0.12/dist/js/select2.min.js' => array(
      'type' => 'external',
    ),
  );

  // Store the users mail server side with the form (needed in the submit
  // handler).
  $form['mail'] = [
    '#type' => 'value',
    '#value' => $user->mail
  ];
  $form['users_name'] = [
    '#type' => 'value',
    '#value' => $user->data['display_name'],
  ];

  foreach ($configuration['lists'] as $list) {
    $hl_list = $hl->getList($list['id']);

    // Build subscription options based on configuration.
    $fields = array_column($hl_list['fields'], NULL, 'id');
    $options = $fields[$list['field']]['options'];

    // If automatically use all values not selected filter options base on
    // selections.
    if (!$list['auto']) {
      $types = array_values($list['types']);
      $options = array_filter($options, function ($id, $val) use ($types) {
        return in_array($val, $types);
      }, ARRAY_FILTER_USE_BOTH);
    }

    // Find user subscriptions.
    $selected = [];
    $hl_member = $hl->getMember($list['id'], $user->mail);
    $name = $fields[$list['field']]['name'];
    if (!is_null($hl_member) && $hl_member['status']['status'] == 'active') {
      $selected = array_column($hl_member[$name], 'id');
    }

    if (count($options) == 1) {
      $form['lists'][$list['id']][$name][] = [
        '#type' => 'checkboxes',
        '#title' => $list['label'],
        '#description' => $list['description'],
        '#options' => $options,
        '#default_value' => array_combine($selected, $selected),
      ];
    }
    else {
      $form['lists'][$list['id']][$name][] = [
        '#type' => 'select',
        '#title' => $list['label'],
        '#description' => $list['description'],
        '#options' => $options,
        '#default_value' => array_combine($selected, $selected),
        '#multiple' => TRUE,
        '#attributes' => array(
          'class' => array('category-select'),
        )
      ];
    }
  }

  $form['actions']['update'] = array(
    '#type' => 'submit',
    '#value' => t('Update subscriptions'),
    '#weight' => 15,
    '#submit' => array('ding_subscription_form_submit'),
  );

  return $form;
}

/**
 * Submit handler for the subscription form.
 */
function ding_subscription_form_submit($form, &$form_state) {
  $configuration = variable_get('ding_subscription_settings', []);
  $hl = new HeyloyaltyClient($configuration['api']['key'], $configuration['api']['secret']);

  $lists = $form_state['values']['lists'];
  foreach ($lists as $list_id => $list) {
    $field_name = key($list);
    $selected = call_user_func_array('array_merge', $list[$field_name]);
    $selected = array_filter($selected);
    $hl->updateMember($form_state['values']['mail'], $form_state['values']['users_name'] , $list_id, [
      $field_name => $selected,
    ]);
  }
}

/**
 * Implements hook_form().
 *
 * Form used to lookup a given users subscriptions at the provider.
 */
function ding_subscription_lookup_form($form, &$form_state) {
  $form['mail'] = [
    '#type' => 'textfield',
    '#title' => t('User mail'),
    '#description' => t('Enter the mail address for the user to lookup'),
  ];

  $form['user_info'] = [
    '#type' => 'fieldset',
    '#title' => t('User information'),
    '#prefix' => '<div id="user-info-fieldset-wrapper">',
    '#suffix' => '</div>',
  ];

  if (isset($form_state['values']['mail']) && !empty($form_state['values']['mail'])) {
    $configuration = variable_get('ding_subscription_settings', []);
    if (empty($configuration['api']['key'])) {
      $form['user_info']['data'] = [
        '#markup' => t('Missing configuration. Please configure the integration with the subscription provider.'),
      ];
    }
    else {
      $hl = new HeyloyaltyClient($configuration['api']['key'], $configuration['api']['secret']);

      $items = [];
      foreach ($configuration['lists'] as $list) {
        $item = [
          'label' => $list['label'],
          'status' => FALSE
        ];

        // Find user field subscriptions.
        $hl_member = $hl->getMember($list['id'], $form_state['values']['mail']);
        if (!is_null($hl_member)) {
          $selected = [];
          $hl_list = $hl->getList($list['id']);
          $fields = array_column($hl_list['fields'], NULL, 'id');
          $name = $fields[$list['field']]['name'];
          if (!is_null($hl_member) && $hl_member['status']['status'] == 'active') {
            $selected = array_column($hl_member[$name], 'id', 'value');
            if (!$list['auto']) {
              // Not all selections available is used, so filter it with list
              // configuration.
              $types = array_values($list['types']);
              $selected = array_filter($selected, function ($id, $val) use ($types) {
                return in_array($id, $types);
              }, ARRAY_FILTER_USE_BOTH);
            }
          }

          if (!empty($selected)) {
            $item['status'] = TRUE;
            $item['selection'] = array_keys($selected);
          }
        }
        $items[] = $item;
      }

      $form['user_info']['data'] = [
        '#theme' => 'ding_subscription_user_info',
        '#items' => $items,
      ];
    }
  }

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Lookup user'),
    '#submit' => array(
      'ding_subscription_lookup_form_submit',
    ),
    '#ajax' => array(
      'callback' => 'ding_subscription_lookup_form_callback',
      'method' => 'replace',
      'wrapper' => 'user-info-fieldset-wrapper',
    ),
  ];

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'ding_subscription') . '/css/ding_subscription.admin.css',
  );

  return $form;
}


/**
 * Add one more submit callback.
 */
function ding_subscription_lookup_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax add-one-more callback.
 */
function ding_subscription_lookup_form_callback($form, $form_state) {
  return $form['user_info'];
}






















